<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="mule-munit-demo-suite.xml" />
	<munit:test name="get-all-employee-success-test-case-with-data" doc:id="d010e18c-6159-4b7f-9337-35abe27f0fa6" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="001c0dfe-6ba4-4d1c-8b68-1430ba450264" >
				<munit:payload value="#[output application/json --- readUrl('classpath://get_all_employee_data_return\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock when" doc:id="45bf0391-882e-4468-8b1d-d3f522f7fda5" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="350b3852-2c82-4ed3-a328-794a27a1fbcb" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[%dw 2.0&#10;&#10;output application/json&#10;---&#10;&#10;[&#10;  {&#10;    "emp_status": "A",&#10;    "emp_name": "Dereje",&#10;    "emp_address": "USA",&#10;    "emp_id": 100&#10;  },&#10;  {&#10;    "emp_status": "I",&#10;    "emp_name": "Winta",&#10;    "emp_address": "ET",&#10;    "emp_id": 101&#10;  },&#10;  {&#10;    "emp_status": "I",&#10;    "emp_name": "Ruhama",&#10;    "emp_address": "ET",&#10;    "emp_id": 102&#10;  }&#10;]&#10;&#10;&#10;]' mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get-all-employee-flow" doc:id="1d45f974-344a-4215-96c0-0171e54a20bc" name="get-all-employee-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="42e7779b-878f-47ea-8c47-b4810e51fa1e" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import get_all_employee_data_return::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get-all-employee-success-test-case-with-no-data" doc:id="56c18ee0-9be3-4bbe-a307-9e3ca4b7c66f" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="73d864ca-3918-482f-94c3-be17f57e05c3" >
				<munit:payload value="#[readUrl('classpath://get_all_employee_no_data_return\set-event_payload.dwl')]" encoding="UTF-8" />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock when" doc:id="08f12ada-98f8-4ac7-b467-7bee8863029f" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="350b3852-2c82-4ed3-a328-794a27a1fbcb" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[%dw 2.0&#10;&#10;output application/json&#10;---&#10;[]&#10;]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get-all-employee-flow" doc:id="5c30b85b-41ff-407b-8cce-1db01dbe9311" name="get-all-employee-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="6f0934f9-ffc0-4c55-8ed8-c6157251a398" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import get_all_employee_no_data_return::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
